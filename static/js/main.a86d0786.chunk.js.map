{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","components/Spinner/index.js","components/Spinner/Spinner.js","components/ErrorIndicator/index.js","components/ErrorIndicator/ErrorIndicator.js","components/ErrorBoundry/index.js","components/ErrorBoundry/ErrorBoundry.js","components/HocHelpers/ItemListWrapper.js","components/SwapiServiceContext/SwapiServiceContext.js","components/HocHelpers/SwapiServiceWrapper.js","components/RandomPlanet/RandomPlanet.js","components/RandomPlanet/index.js","components/ErrorButton/index.js","components/ErrorButton/ErrorButton.js","components/RowEntity/index.js","components/RowEntity/RowEntity.js","components/ItemList/index.js","components/ItemList/ItemList.js","services/swapi-service.js","components/CommonComponents/CommonItemLists.js","components/ItemDetails/index.js","components/ItemDetails/ItemDetails.js","components/RecordItem/index.js","components/RecordItem/RecordItem.js","components/CommonComponents/PersonDetails.js","components/PeoplePage/index.js","components/CommonComponents/StarshipDetails.js","components/CommonComponents/PlanetDetails.js","components/PeoplePage/PeoplePage.js","components/App/index.js","components/App/App.js","index.js"],"names":["Header","className","href","Spinner","ErrorIndicator","ErrorBoundry","state","hasError","error","info","this","setState","props","children","Component","ItemListWrapper","View","getData","data","then","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","SwapiServiceWrapper","swapiService","RandomPlanet","planet","loading","updatePlanet","getPlanet","Math","floor","random","catch","interval","setInterval","clearInterval","hasData","spinner","content","PlanetView","id","name","population","rotationPeriod","diameter","Fragment","src","ErrorButton","renderError","foo","bar","onClick","RowEntity","left","right","ItemList","onItemSelected","renderLabel","items","map","item","label","SwapiService","_baseUrl","_baseImageUrl","getResource","url","a","fetch","response","json","body","status","Error","getPersonImageUrl","personId","getStarshipImageUrl","starshipId","getPlanetImageUrl","planetId","getAllPeople","results","_transformPerson","getPerson","person","getAllPlanets","_transformPlanet","getAllStarships","getStarship","starship","_transformStarship","_getExtractId","match","rotation_period","terrain","model","starshipClass","starship_class","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","gender","birthYear","birth_year","eyeColor","eye_color","hairColor","hair_color","skinColor","skin_color","height","mass","PeopleList","ItemDetails","image","itemId","getImageUrl","updateItemDetails","prevProps","Children","child","cloneElement","RecordItem","field","PeoplePage","selectedPerson","onPersonSelected","peopleList","personDetails","App","showRandomPlanet","toggleRandomPlanet","buttons","value","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.a86d0786.chunk.js","sourcesContent":["import Header from './Header';\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n  <div className=\"header d-flex\">\r\n    <h3>\r\n      <a href=\"#\">Star DB</a>\r\n    </h3>\r\n    <ul className=\"header-links d-flex\">\r\n      <li>\r\n        <a href=\"#\">People</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\">Planets</a>\r\n      </li>\r\n      <li>\r\n        <a href=\"#\">Starships</a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import Spinner from './Spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => (\r\n  <div className=\"loadingio-spinner-double-ring-quh3a49vtmd\">\r\n    <div className=\"ldio-9opildb5qm5\">\r\n      <div></div>\r\n      <div></div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Spinner;\r\n","import ErrorIndicator from './ErrorIndicator';\r\n\r\nexport default ErrorIndicator;\r\n","import React from 'react';\r\n\r\nimport './ErrorIndicator.css';\r\n\r\nconst ErrorIndicator = () => (\r\n  <div className=\"error-indicator\">\r\n    <div className=\"loadingio-spinner-magnify-xvi2eomm9dk\">\r\n      <div className=\"ldio-djr5te9pz2p\">\r\n        <div>\r\n          <div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <span className=\"error-message\">\r\n      <div>Something has gone wrong!</div>\r\n      <div>(but we already sent droids to fix it)</div>\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default ErrorIndicator;\r\n","import ErrorBoundry from './ErrorBoundry';\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorIndicator from '../ErrorIndicator';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  // аргументы error и info дают много полезной инфы в браузере при возникновении ошибки\r\n  // включаем debugger, далее см. Scope -> Local в браузере\r\n  /*eslint-disable no-unused-vars*/\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) return <ErrorIndicator />;\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nErrorBoundry.propTypes = {\r\n  children: PropTypes.object.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport Spinner from '../Spinner';\r\n\r\nconst ItemListWrapper = (View, getData) =>\r\n  class Wrapper extends Component {\r\n    state = {\r\n      data: null, // список сущностей (людей, планет, кораблей)\r\n    };\r\n\r\n    // componentDidMount() - best practice для получения данных от сервера по API\r\n    componentDidMount() {\r\n      getData().then(data => {\r\n        this.setState({\r\n          data,\r\n        });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { data } = this.state;\r\n\r\n      if (!data) return <Spinner />;\r\n\r\n      return <View {...this.props} data={data} />;\r\n    }\r\n  };\r\n\r\nexport default ItemListWrapper;\r\n","import React from 'react';\r\n\r\nconst {\r\n  Provider: SwapiServiceProvider,\r\n  Consumer: SwapiServiceConsumer,\r\n} = React.createContext();\r\n\r\nexport { SwapiServiceProvider, SwapiServiceConsumer };\r\n","import React from 'react';\r\nimport { SwapiServiceConsumer } from '../SwapiServiceContext';\r\n\r\nconst SwapiServiceWrapper = View =>\r\n  function wrapper(props) {\r\n    return (\r\n      <SwapiServiceConsumer>\r\n        {swapiService => <View {...props} swapiService={swapiService} />}\r\n      </SwapiServiceConsumer>\r\n    );\r\n  };\r\n\r\nexport default SwapiServiceWrapper;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../Spinner';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\nimport './RandomPlanet.css';\r\n\r\n// В этом компоненте используется паттерн \"Разделение обязанностей\"\r\n// Компонент RandomPlanet отвечает за логику, содержит состояние и принимает данные по API,\r\n// передавая их компоненту PlanetView для рендеринга.\r\n// компонент PlanetView отвечает только за контент, рендеринг содержимого и отделен\r\n// от основной логики, не знает откуда приходят данные\r\n\r\n// Карточка со случайной планетой\r\nclass RandomPlanet extends Component {\r\n  // состояние компонента\r\n  state = {\r\n    planet: {}, // характеристики планеты\r\n    loading: true, // индикатор загрузки\r\n  };\r\n\r\n  // обновление состояния компонента по API\r\n  updatePlanet = () => {\r\n    const { getPlanet } = this.props.swapiService;\r\n    // случайный id планеты\r\n    const id = Math.floor(Math.random() * 25) + 3;\r\n    // запрос к серверу\r\n    getPlanet(id)\r\n      .then(planet => this.setState({ planet, loading: false }))\r\n      .catch(() => this.setState({ loading: false }));\r\n  };\r\n\r\n  // 1. В конструкторе не должно быть запросов к серверу по API - это плохая практика!\r\n  // 2. На этапе constructor() компоннет еще не встроен в DOM-дерево (Unmounting), поэтому вызывать setState нельзя!\r\n  // поэтому вместо constructor() используем componentDidMount()\r\n  componentDidMount() {\r\n    this.updatePlanet();\r\n    this.interval = setInterval(this.updatePlanet, 10000);\r\n  }\r\n\r\n  // удаляем таймер после удаления компонента\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { planet, loading } = this.state;\r\n    const hasData = !loading;\r\n\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = hasData ? <PlanetView planet={planet} /> : null;\r\n\r\n    return (\r\n      <ErrorBoundry>\r\n        <div className=\"random-planet jumbotron rounded\">\r\n          {spinner}\r\n          {content}\r\n        </div>\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n\r\n// Компонент с информацией о планете\r\nconst PlanetView = ({ planet }) => {\r\n  const { id, name, population, rotationPeriod, diameter } = planet;\r\n\r\n  // React.Fragment позволяет группировать JSX-компоненты, не создавая дополнительного DOM-объекта\r\n  // Иначе пришлось бы создавать обертку div, потому что компонент может рендерить только корневой DOM-объект\r\n  return (\r\n    <React.Fragment>\r\n      <img\r\n        className=\"planet-image\"\r\n        src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\r\n      />\r\n      <div>\r\n        <h4>{name}</h4>\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Population</span>\r\n            <span>{population}</span>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Rotation Period</span>\r\n            <span>{rotationPeriod}</span>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Diameter</span>\r\n            <span>{diameter}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nRandomPlanet.propTypes = {\r\n  swapiService: PropTypes.object.isRequired,\r\n};\r\n\r\nPlanetView.propTypes = {\r\n  planet: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SwapiServiceWrapper(RandomPlanet);\r\n","import RandomPlanet from './RandomPlanet';\r\n\r\nexport default RandomPlanet;\r\n","import ErrorButton from './ErrorButton';\r\n\r\nexport default ErrorButton;\r\n","import React, { Component } from 'react';\r\n\r\nexport default class ErrorButton extends Component {\r\n  state = {\r\n    renderError: false,\r\n  };\r\n\r\n  render() {\r\n    if (this.state.renderError) {\r\n      this.foo.bar = 0; // fake error\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"error-button btn btn-danger btn-lg\"\r\n        onClick={() => this.setState({ renderError: true })}\r\n      >\r\n        Throw Error\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","import RowEntity from './RowEntity';\r\n\r\nexport default RowEntity;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RowEntity = ({ left, right }) => (\r\n  <div className=\"row mb2\">\r\n    <div className=\"col-md-6\">{left}</div>\r\n    <div className=\"col-md-6\">{right}</div>\r\n  </div>\r\n);\r\n\r\nRowEntity.propTypes = {\r\n  left: PropTypes.object.isRequired,\r\n  right: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default RowEntity;\r\n","import ItemList from './ItemList';\r\n\r\nexport default ItemList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ItemList.css';\r\n\r\n// список сущностей (людей, планет, кораблей)\r\nconst ItemList = props => {\r\n  const { data, onItemSelected, children: renderLabel } = props;\r\n\r\n  // функция для создания элемента списка\r\n  const items = data.map(item => {\r\n    const { id } = item;\r\n    const label = renderLabel(item); // паттерн children (см. файл patterns)\r\n    return (\r\n      <li\r\n        className=\"list-group-item\"\r\n        key={id}\r\n        onClick={() => onItemSelected(id)}\r\n      >\r\n        {label}\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"item-list\">\r\n      <ul className=\"list-group\">{items}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nItemList.propTypes = {\r\n  onItemSelected: PropTypes.func.isRequired,\r\n  children: PropTypes.func.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ItemList;\r\n","// Код, который работает с сетью лучше изолировать в отдельный класс-сервис\r\n// Компоненты не должны знать откуда именно приходят данные\r\n// Такая инкапсуляция упростит тестирование и поддержку кода, который работает с API\r\n\r\nexport default class SwapiService {\r\n  // _varibale - это code convention JS\r\n  // это приватная часть класса, таким образом мы говорим другим разработчикам,\r\n  // что это переменная, которую не нужно изменять снаружи класса\r\n  _baseUrl = 'https://swapi.dev/api';\r\n  _baseImageUrl = 'https://starwars-visualguide.com/assets/img';\r\n\r\n  // получение данных по API\r\n  getResource = async url => {\r\n    const response = await fetch(`${this._baseUrl}${url}`);\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(\r\n        `Could not fetch ${url}. Recieved status code ${response.status}`\r\n      );\r\n    }\r\n\r\n    return body;\r\n  };\r\n\r\n  // получение картинки\r\n  getPersonImageUrl = personId =>\r\n    `${this._baseImageUrl}/characters/${personId}.jpg`;\r\n\r\n  getStarshipImageUrl = starshipId =>\r\n    `${this._baseImageUrl}/starships/${starshipId}.jpg`;\r\n\r\n  getPlanetImageUrl = planetId =>\r\n    `${this._baseImageUrl}/planets/${planetId}.jpg`;\r\n\r\n  // получение всех персонажей\r\n  getAllPeople = async () => {\r\n    const response = await this.getResource('/people/');\r\n    return response.results.map(this._transformPerson);\r\n  };\r\n\r\n  // получение конкретного персонажа\r\n  getPerson = async personId => {\r\n    const person = await this.getResource(`/people/${personId}`);\r\n    return this._transformPerson(person);\r\n  };\r\n\r\n  // получение всех планет\r\n  getAllPlanets = async () => {\r\n    const response = await this.getResource('/planets/');\r\n    return response.results.map(this._transformPlanet);\r\n  };\r\n\r\n  // получение конкретной планеты\r\n  getPlanet = async planetId => {\r\n    const planet = await this.getResource(`/planets/${planetId}`);\r\n    return this._transformPlanet(planet);\r\n  };\r\n\r\n  // получение всех космических кораблей\r\n  getAllStarships = async () => {\r\n    const response = await this.getResource('/starships/');\r\n    return response.results;\r\n  };\r\n\r\n  // получение конкретного корабля\r\n  getStarship = async starshipId => {\r\n    const starship = await this.getResource(`/starships/${starshipId}`);\r\n    return this._transformStarship(starship);\r\n  };\r\n\r\n  _getExtractId = item => {\r\n    const idRegExp = /\\/([0-9]*)\\/$/;\r\n    return item.url.match(idRegExp)[1];\r\n  };\r\n\r\n  _transformPlanet = planet => ({\r\n    id: this._getExtractId(planet),\r\n    name: planet.name,\r\n    population: planet.population,\r\n    rotationPeriod: planet.rotation_period,\r\n    diameter: planet.diameter,\r\n    terrain: planet.terrain,\r\n  });\r\n\r\n  _transformStarship = starship => ({\r\n    id: this._getExtractId(starship),\r\n    name: starship.name,\r\n    model: starship.model,\r\n    starshipClass: starship.starship_class,\r\n    manufacturer: starship.manufacturer,\r\n    costInCredits: starship.cost_in_credits,\r\n    length: starship.length,\r\n    crew: starship.crew,\r\n    passengers: starship.passengers,\r\n  });\r\n\r\n  _transformPerson = person => ({\r\n    id: this._getExtractId(person),\r\n    name: person.name,\r\n    gender: person.gender,\r\n    birthYear: person.birth_year,\r\n    eyeColor: person.eye_color,\r\n    hairColor: person.hair_color,\r\n    skinColor: person.skin_color,\r\n    height: person.height,\r\n    mass: person.mass,\r\n  });\r\n}\r\n","import ItemList from '../ItemList';\r\nimport { ItemListWrapper } from '../HocHelpers';\r\nimport SwapiService from '../../services/swapi-service';\r\n\r\nconst { getAllPeople, getAllStarships, getAllPlanets } = new SwapiService();\r\n\r\nconst PeopleList = ItemListWrapper(ItemList, getAllPeople);\r\n\r\nconst StarshipsList = ItemListWrapper(ItemList, getAllStarships);\r\n\r\nconst PlanetsList = ItemListWrapper(ItemList, getAllPlanets);\r\n\r\nexport { PeopleList, StarshipsList, PlanetsList };\r\n","import ItemDetails from './ItemDetails';\r\n\r\nexport default ItemDetails;\r\n","import React, { Component, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../Spinner';\r\nimport ErrorButton from '../ErrorButton';\r\n\r\nimport './ItemDetails.css';\r\n\r\nexport default class ItemDetails extends Component {\r\n  // состояние компонента\r\n  state = {\r\n    item: null, // характеристики сущности {}\r\n    image: null, // картинка сущности\r\n  };\r\n\r\n  // обновление карточки сущности\r\n  updateItemDetails() {\r\n    const { itemId, getData, getImageUrl } = this.props;\r\n\r\n    if (!itemId) return;\r\n\r\n    getData(itemId).then(item => {\r\n      this.setState({ item, image: getImageUrl(itemId) });\r\n    });\r\n  }\r\n\r\n  // показываем карточку сущности в момент подключения компонента в DOM-дерево\r\n  componentDidMount() {\r\n    this.updateItemDetails();\r\n  }\r\n\r\n  // обновляем компонент, когда придет новый props\r\n  componentDidUpdate(prevProps) {\r\n    // условие нужно, чтобы не было бесконечного цикла в результате обновления state и\r\n    // последующего вызова componentDidUpdate(), что в свою очередь снова вызовет обновление state и т.д.\r\n    if (this.props.itemId !== prevProps.itemId) {\r\n      this.updateItemDetails();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // при первой инцициализации компонента id = null\r\n    // чтобы избежать ошибки, делаем проверку\r\n    if (!this.state.item) {\r\n      return (\r\n        <React.Fragment>\r\n          <span>Select an item from list!</span>\r\n          <Spinner />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    const { item, image } = this.state;\r\n\r\n    const { name } = item;\r\n\r\n    return (\r\n      <div className=\"item-details card\">\r\n        <img className=\"item-image\" src={image}></img>\r\n        <div className=\"card-body\">\r\n          <h3>{name}</h3>\r\n          <ul className=\"list-group list-group-flush\">\r\n            {Children.map(this.props.children, child =>\r\n              React.cloneElement(child, { item })\r\n            )}\r\n          </ul>\r\n          <ErrorButton />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nItemDetails.propTypes = {\r\n  itemId: PropTypes.string.isRequired,\r\n  name: PropTypes.string,\r\n  getData: PropTypes.func.isRequired,\r\n  getImageUrl: PropTypes.func.isRequired,\r\n  children: PropTypes.array.isRequired,\r\n};\r\n","import RecordItem from './RecordItem';\r\n\r\nexport default RecordItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RecordItem = ({ item, field, label }) => (\r\n  <li className=\"list-group-item\">\r\n    <span className=\"term\">{label}</span>\r\n    <span>{item[field]}</span>\r\n  </li>\r\n);\r\n\r\nRecordItem.propTypes = {\r\n  item: PropTypes.object,\r\n  field: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default RecordItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ItemDetails from '../ItemDetails';\r\nimport RecordItem from '../RecordItem';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\n\r\nconst PersonDetails = ({ id, swapiService }) => {\r\n  const { getPerson, getPersonImageUrl } = swapiService;\r\n  return (\r\n    <ItemDetails\r\n      itemId={id}\r\n      getData={getPerson}\r\n      getImageUrl={getPersonImageUrl}\r\n    >\r\n      <RecordItem field=\"gender\" label=\"Gender\" />\r\n      <RecordItem field=\"birthYear\" label=\"Birth Year\" />\r\n      <RecordItem field=\"eyeColor\" label=\"Eye color\" />\r\n      <RecordItem field=\"hairColor\" label=\"Hair Color\" />\r\n      <RecordItem field=\"skinColor\" label=\"Skin Color\" />\r\n      <RecordItem field=\"height\" label=\"Height\" />\r\n      <RecordItem field=\"mass\" label=\"Mass\" />\r\n    </ItemDetails>\r\n  );\r\n};\r\n\r\nPersonDetails.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  swapiService: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SwapiServiceWrapper(PersonDetails);\r\n","import PeoplePage from './PeoplePage';\r\n\r\nexport default PeoplePage;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ItemDetails from '../ItemDetails';\r\nimport RecordItem from '../RecordItem';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\n\r\nconst StarshipDetails = ({ id, swapiService }) => {\r\n  const { getStarship, getStarshipImageUrl } = swapiService;\r\n  return (\r\n    <ItemDetails\r\n      itemId={id}\r\n      getData={getStarship}\r\n      getImageUrl={getStarshipImageUrl}\r\n    >\r\n      <RecordItem field=\"model\" label=\"Model\" />\r\n      <RecordItem field=\"starshipClass\" label=\"Starship class\" />\r\n      <RecordItem field=\"manufacturer\" label=\"Manufacturer\" />\r\n      <RecordItem field=\"costInCredits\" label=\"Cost in credits\" />\r\n      <RecordItem field=\"length\" label=\"Length\" />\r\n      <RecordItem field=\"crew\" label=\"Crew\" />\r\n      <RecordItem field=\"passengers\" label=\"Passengers\" />\r\n    </ItemDetails>\r\n  );\r\n};\r\n\r\nStarshipDetails.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  swapiService: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SwapiServiceWrapper(StarshipDetails);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ItemDetails from '../ItemDetails';\r\nimport RecordItem from '../RecordItem';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\n\r\nconst PlanetDetails = ({ id, swapiService }) => {\r\n  const { getPlanet, getPlanetImageUrl } = swapiService;\r\n  return (\r\n    <ItemDetails\r\n      itemId={id}\r\n      getData={getPlanet}\r\n      getImageUrl={getPlanetImageUrl}\r\n    >\r\n      <RecordItem field=\"population\" label=\"Population\" />\r\n      <RecordItem field=\"rotationPeriod\" label=\"Rotation period\" />\r\n      <RecordItem field=\"diameter\" label=\"Diameter\" />\r\n      <RecordItem field=\"terrain\" label=\"Terrain\" />\r\n    </ItemDetails>\r\n  );\r\n};\r\n\r\nPlanetDetails.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  swapiService: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SwapiServiceWrapper(PlanetDetails);\r\n","import React, { Component } from 'react';\r\nimport RowEntity from '../RowEntity';\r\nimport { PeopleList, PersonDetails } from '../CommonComponents';\r\nimport ErrorIndicator from '../ErrorIndicator';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\n\r\n// этот компонент нужен для реализации паттерна Error Boundary, чтобы функция componentDidCatch() в App,\r\n// не останавливала ВСЕ приложение в случае ошибки в одном из компонентов приложения\r\n// т.о. мы при возникновении ошибки в компоненте PeoplePage, другие компоненты будут работать,\r\n// потому что React пойдет по дереву DOM вверх, найдет ближайший componentDidCatch(), не дойдя до App\r\n// и выкинет предупреждени об именно в этом компоненте\r\nexport default class PeoplePage extends Component {\r\n  state = {\r\n    selectedPerson: '3',\r\n  };\r\n\r\n  onPersonSelected = selectedPerson => {\r\n    this.setState({ selectedPerson });\r\n  };\r\n\r\n  render() {\r\n    const { selectedPerson, hasError } = this.state;\r\n\r\n    if (hasError) return <ErrorIndicator />;\r\n\r\n    const peopleList = (\r\n      <ErrorBoundry>\r\n        <PeopleList onItemSelected={this.onPersonSelected}>\r\n          {item => `${item.name} (${item.gender})`}\r\n        </PeopleList>\r\n      </ErrorBoundry>\r\n    );\r\n\r\n    const personDetails = (\r\n      <ErrorBoundry>\r\n        <PersonDetails id={selectedPerson} />\r\n      </ErrorBoundry>\r\n    );\r\n\r\n    // паттерн свойства-компоненты\r\n    return (\r\n      <ErrorBoundry>\r\n        <RowEntity left={peopleList} right={personDetails} />\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n","import App from './App';\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\nimport Header from '../Header';\r\nimport RandomPlanet from '../RandomPlanet';\r\nimport ErrorIndicator from '../ErrorIndicator';\r\nimport ErrorButton from '../ErrorButton';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\nimport PeoplePage from '../PeoplePage';\r\nimport SwapiService from '../../services/swapi-service';\r\nimport { SwapiServiceProvider } from '../SwapiServiceContext';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    showRandomPlanet: true,\r\n    hasError: false,\r\n  };\r\n\r\n  swapiService = new SwapiService();\r\n\r\n  toggleRandomPlanet = () => {\r\n    this.setState(state => ({\r\n      showRandomPlanet: !state.showRandomPlanet,\r\n    }));\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    const { showRandomPlanet, hasError } = this.state;\r\n\r\n    if (hasError) return <ErrorIndicator />;\r\n\r\n    const planet = showRandomPlanet ? <RandomPlanet /> : null;\r\n\r\n    const buttons = (\r\n      <div className=\"row mb2 button-row\">\r\n        <button\r\n          className=\"toggle-planet btn btn-warning btn-lg\"\r\n          onClick={this.toggleRandomPlanet}\r\n        >\r\n          Toggle Random Planet\r\n        </button>\r\n        <ErrorButton />\r\n      </div>\r\n    );\r\n\r\n    return (\r\n      <ErrorBoundry>\r\n        <SwapiServiceProvider value={this.swapiService}>\r\n          <div className=\"stardb-app\">\r\n            <Header />\r\n            {planet}\r\n            {buttons}\r\n            <PeoplePage />\r\n          </div>\r\n        </SwapiServiceProvider>\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.querySelector('.root')\r\n);\r\n"],"sourceRoot":""}