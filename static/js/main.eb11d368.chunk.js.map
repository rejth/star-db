{"version":3,"sources":["components/Header/index.js","components/Header/Header.js","components/Spinner/index.js","components/Spinner/Spinner.js","components/ErrorIndicator/index.js","components/ErrorIndicator/ErrorIndicator.js","components/ErrorBoundry/index.js","components/ErrorBoundry/ErrorBoundry.js","components/HocHelpers/ItemListWrapper.js","components/SwapiServiceContext/SwapiServiceContext.js","components/HocHelpers/SwapiServiceWrapper.js","components/HocHelpers/compose.js","components/RandomPlanet/RandomPlanet.js","components/RandomPlanet/index.js","components/RowEntity/index.js","components/RowEntity/RowEntity.js","components/ItemList/index.js","components/ItemList/ItemList.js","components/CommonComponents/CommonItemLists.js","components/ItemDetails/index.js","components/ItemDetails/ItemDetails.js","components/RecordItem/index.js","components/RecordItem/RecordItem.js","components/CommonComponents/PersonDetails.js","components/CommonComponents/StarshipDetails.js","components/CommonComponents/PlanetDetails.js","components/Pages/PeoplePage.js","components/Pages/PlanetsPage.js","components/Pages/StarshipsPage.js","services/swapi-service.js","components/App/index.js","components/App/App.js","index.js"],"names":["Header","className","to","Spinner","ErrorIndicator","ErrorBoundry","state","hasError","error","info","this","setState","props","children","Component","ItemListWrapper","View","data","loading","getData","then","catch","React","createContext","SwapiServiceProvider","Provider","SwapiServiceConsumer","Consumer","SwapiServiceWrapper","mapMethodsToProps","swapiService","serviceProps","compose","func","component","reduceRight","previousValue","f","RandomPlanet","planet","updatePlanet","Math","floor","random","interval","setInterval","clearInterval","hasData","spinner","content","PlanetView","id","name","population","rotationPeriod","diameter","terrain","Fragment","src","getPlanet","RowEntity","left","right","ItemList","onItemSelected","renderLabel","items","map","item","label","onClick","PeopleList","getAllPeople","StarshipsList","getAllStarships","PlanetsList","getAllPlanets","ItemDetails","image","getImageUrl","updateItemDetails","prevProps","Children","child","cloneElement","RecordItem","field","getPerson","getPersonImageUrl","getStarship","getStarshipImageUrl","getPlanetImageUrl","PeoplePage","selectedItem","itemList","gender","itemDetails","PlanetsPage","StarshipsPage","model","SwapiService","_baseUrl","_baseImageUrl","getResource","url","a","fetch","response","json","body","status","Error","personId","starshipId","planetId","results","_transformPerson","person","_transformPlanet","_transformStarship","starship","_getExtractId","match","rotation_period","starshipClass","starship_class","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","birthYear","birth_year","eyeColor","eye_color","hairColor","hair_color","skinColor","skin_color","height","mass","App","value","path","exact","render","ReactDOM","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.eb11d368.chunk.js","sourcesContent":["import Header from './Header';\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = () => (\r\n  <div className=\"header d-flex\">\r\n    <h3>\r\n      <Link to=\"/\">StarDB</Link>\r\n    </h3>\r\n    <ul className=\"header-links d-flex\">\r\n      <li>\r\n        <Link to=\"/people\">People</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/planets\">Planets</Link>\r\n      </li>\r\n      <li>\r\n        <Link to=\"/starships\">Starships</Link>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import Spinner from './Spinner';\r\n\r\nexport default Spinner;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => (\r\n  <div className=\"loadingio-spinner-double-ring-quh3a49vtmd\">\r\n    <div className=\"ldio-9opildb5qm5\">\r\n      <div></div>\r\n      <div></div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n      <div>\r\n        <div></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Spinner;\r\n","import ErrorIndicator from './ErrorIndicator';\r\n\r\nexport default ErrorIndicator;\r\n","import React from 'react';\r\n\r\nimport './ErrorIndicator.css';\r\n\r\nconst ErrorIndicator = () => (\r\n  <div className=\"error-indicator\">\r\n    <div className=\"loadingio-spinner-magnify-xvi2eomm9dk\">\r\n      <div className=\"ldio-djr5te9pz2p\">\r\n        <div>\r\n          <div>\r\n            <div></div>\r\n            <div></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <span className=\"error-message\">\r\n      <div>BOOM! Something has gone wrong!</div>\r\n      <div>(but we already sent droids to fix it)</div>\r\n    </span>\r\n  </div>\r\n);\r\n\r\nexport default ErrorIndicator;\r\n","import ErrorBoundry from './ErrorBoundry';\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorIndicator from '../ErrorIndicator';\r\n\r\nexport default class ErrorBoundry extends Component {\r\n  state = {\r\n    hasError: false,\r\n  };\r\n\r\n  // аргументы error и info дают много полезной инфы в браузере при возникновении ошибки\r\n  // включаем debugger, далее см. Scope -> Local в браузере\r\n  /*eslint-disable no-unused-vars*/\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { hasError } = this.state;\r\n    if (hasError) return <ErrorIndicator />;\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nErrorBoundry.propTypes = {\r\n  children: PropTypes.object.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../Spinner';\r\nimport ErrorIndicator from '../ErrorIndicator';\r\n\r\nconst ItemListWrapper = View =>\r\n  class Consumer extends Component {\r\n    state = {\r\n      data: null, // список сущностей (людей, планет или кораблей)\r\n      loading: true,\r\n      error: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n      /* eslint react/prop-types: 0 */\r\n      const { getData } = this.props;\r\n\r\n      this.setState({ loading: true, error: false });\r\n\r\n      getData()\r\n        .then(data => {\r\n          this.setState({ data, loading: false });\r\n        })\r\n        .catch(() => this.setState({ error: true, loading: false }));\r\n    }\r\n\r\n    render() {\r\n      const { data, loading, error } = this.state;\r\n\r\n      if (loading) return <Spinner />;\r\n\r\n      if (error) return <ErrorIndicator />;\r\n\r\n      return <View {...this.props} data={data} />;\r\n    }\r\n  };\r\n\r\nItemListWrapper.propTypes = {\r\n  getData: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ItemListWrapper;\r\n","import React from 'react';\r\n\r\nconst {\r\n  Provider: SwapiServiceProvider,\r\n  Consumer: SwapiServiceConsumer,\r\n} = React.createContext();\r\n\r\nexport { SwapiServiceProvider, SwapiServiceConsumer };\r\n","import React from 'react';\r\nimport { SwapiServiceConsumer } from '../SwapiServiceContext';\r\n\r\nconst SwapiServiceWrapper = mapMethodsToProps => View =>\r\n  function consumer(props) {\r\n    return (\r\n      <SwapiServiceConsumer>\r\n        {swapiService => {\r\n          const serviceProps = mapMethodsToProps(swapiService);\r\n          return <View {...props} {...serviceProps} />;\r\n        }}\r\n      </SwapiServiceConsumer>\r\n    );\r\n  };\r\n\r\nexport default SwapiServiceWrapper;\r\n","const compose = (...func) => component =>\r\n  func.reduceRight((previousValue, f) => f(previousValue), component);\r\n\r\nexport default compose;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../Spinner';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\nimport './RandomPlanet.css';\r\n\r\n// В этом компоненте используется паттерн \"Разделение обязанностей\"\r\n// Компонент RandomPlanet отвечает за логику, содержит состояние и принимает данные по API,\r\n// передавая их компоненту PlanetView для рендеринга.\r\n// компонент PlanetView отвечает только за контент, рендеринг содержимого и отделен\r\n// от основной логики, не знает откуда приходят данные\r\n\r\nclass RandomPlanet extends Component {\r\n  state = {\r\n    planet: {}, // характеристики планеты\r\n    loading: true,\r\n  };\r\n\r\n  // обновление состояния компонента по API\r\n  updatePlanet = () => {\r\n    const { getData } = this.props;\r\n    const id = Math.floor(Math.random() * 25) + 3; // случайный id планеты\r\n\r\n    // запрос к серверу\r\n    getData(id)\r\n      .then(planet => this.setState({ planet, loading: false }))\r\n      .catch(() => this.setState({ loading: false }));\r\n  };\r\n\r\n  // 1. В конструкторе не должно быть запросов к серверу по API - это плохая практика!\r\n  // 2. На этапе constructor() компоннет еще не встроен в DOM-дерево (Unmounting), поэтому вызывать setState нельзя!\r\n  // поэтому вместо constructor() используем componentDidMount()\r\n  componentDidMount() {\r\n    this.updatePlanet();\r\n    this.interval = setInterval(this.updatePlanet, 10000);\r\n  }\r\n\r\n  // удаляем таймер после удаления компонента\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n\r\n  render() {\r\n    const { planet, loading } = this.state;\r\n    const hasData = !loading;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = hasData ? <PlanetView planet={planet} /> : null;\r\n\r\n    return (\r\n      <ErrorBoundry>\r\n        <div className=\"random-planet jumbotron rounded\">\r\n          {spinner}\r\n          {content}\r\n        </div>\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n\r\n// Компонент с информацией о планете\r\nconst PlanetView = ({ planet }) => {\r\n  const { id, name, population, rotationPeriod, diameter, terrain } = planet;\r\n\r\n  // React.Fragment позволяет группировать JSX-компоненты, не создавая дополнительного DOM-объекта\r\n  // Иначе пришлось бы создавать обертку div, потому что компонент может рендерить только корневой DOM-объект\r\n  return (\r\n    <React.Fragment>\r\n      <img\r\n        className=\"planet-image\"\r\n        src={`https://starwars-visualguide.com/assets/img/planets/${id}.jpg`}\r\n      />\r\n      <div>\r\n        <h4>{name}</h4>\r\n        <ul className=\"list-group list-group-flush\">\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Population</span>\r\n            <span>{population}</span>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Rotation Period</span>\r\n            <span>{rotationPeriod}</span>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Diameter</span>\r\n            <span>{diameter}</span>\r\n          </li>\r\n          <li className=\"list-group-item\">\r\n            <span className=\"term\">Terrain</span>\r\n            <span>{terrain}</span>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapMethodsToProps = swapiService => ({\r\n  getData: swapiService.getPlanet,\r\n});\r\n\r\nRandomPlanet.propTypes = {\r\n  getData: PropTypes.func.isRequired,\r\n};\r\n\r\nPlanetView.propTypes = {\r\n  planet: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SwapiServiceWrapper(mapMethodsToProps)(RandomPlanet);\r\n","import RandomPlanet from './RandomPlanet';\r\n\r\nexport default RandomPlanet;\r\n","import RowEntity from './RowEntity';\r\n\r\nexport default RowEntity;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RowEntity = ({ left, right }) => (\r\n  <div className=\"row mb2\">\r\n    <div className=\"col-md-6\">{left}</div>\r\n    <div className=\"col-md-6\">{right}</div>\r\n  </div>\r\n);\r\n\r\nRowEntity.propTypes = {\r\n  left: PropTypes.object.isRequired,\r\n  right: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default RowEntity;\r\n","import ItemList from './ItemList';\r\n\r\nexport default ItemList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\nimport './ItemList.css';\r\n\r\n// список всех сущностей (людей, планет или кораблей)\r\nconst ItemList = props => {\r\n  const { data, onItemSelected, children: renderLabel } = props;\r\n\r\n  // функция для создания элемента списка\r\n  const items = data.map(item => {\r\n    const { id } = item;\r\n    const label = renderLabel(item); // паттерн children\r\n\r\n    return (\r\n      <li\r\n        className=\"list-group-item\"\r\n        key={id}\r\n        onClick={() => onItemSelected(id)}\r\n      >\r\n        {label}\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <ErrorBoundry>\r\n      <div className=\"item-list\">\r\n        <ul className=\"list-group\">{items}</ul>\r\n      </div>\r\n    </ErrorBoundry>\r\n  );\r\n};\r\n\r\nItemList.propTypes = {\r\n  onItemSelected: PropTypes.func.isRequired,\r\n  children: PropTypes.func.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ItemList;\r\n","import ItemList from '../ItemList';\r\nimport { ItemListWrapper, SwapiServiceWrapper, compose } from '../HocHelpers';\r\n\r\nconst mapPeopleMethodsToProps = swapiService => ({\r\n  getData: swapiService.getAllPeople,\r\n});\r\n\r\nconst mapStarshipsMethodsToProps = swapiService => ({\r\n  getData: swapiService.getAllStarships,\r\n});\r\n\r\nconst mapPlanetsMethodsToProps = swapiService => ({\r\n  getData: swapiService.getAllPlanets,\r\n});\r\n\r\nconst PeopleList = compose(\r\n  SwapiServiceWrapper(mapPeopleMethodsToProps),\r\n  ItemListWrapper\r\n)(ItemList);\r\n\r\nconst StarshipsList = compose(\r\n  SwapiServiceWrapper(mapStarshipsMethodsToProps),\r\n  ItemListWrapper\r\n)(ItemList);\r\n\r\nconst PlanetsList = compose(\r\n  SwapiServiceWrapper(mapPlanetsMethodsToProps),\r\n  ItemListWrapper\r\n)(ItemList);\r\n\r\nexport { PeopleList, StarshipsList, PlanetsList };\r\n","import ItemDetails from './ItemDetails';\r\n\r\nexport default ItemDetails;\r\n","import React, { Component, Children } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Spinner from '../Spinner';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\nimport './ItemDetails.css';\r\n\r\nexport default class ItemDetails extends Component {\r\n  state = {\r\n    item: null, // характеристики сущности {}\r\n    image: null, // картинка сущности\r\n  };\r\n\r\n  // обновление карточки сущности\r\n  updateItemDetails() {\r\n    const { id, getData, getImageUrl } = this.props;\r\n\r\n    if (!id) return;\r\n\r\n    getData(id).then(item => {\r\n      this.setState({ item, image: getImageUrl(id) });\r\n    });\r\n  }\r\n\r\n  // показываем карточку сущности в момент подключения компонента в DOM-дерево\r\n  componentDidMount() {\r\n    this.updateItemDetails();\r\n  }\r\n\r\n  // обновляем компонент, когда придет новый props\r\n  componentDidUpdate(prevProps) {\r\n    // условие нужно, чтобы не было бесконечного цикла в результате обновления state и\r\n    // последующего вызова componentDidUpdate(), что в свою очередь снова вызовет обновление state и т.д.\r\n    if (this.props.id !== prevProps.id) {\r\n      this.updateItemDetails();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { item, image } = this.state;\r\n\r\n    // при первой инцициализации компонента id = null\r\n    // чтобы избежать ошибки, делаем проверку\r\n    if (!item) {\r\n      return (\r\n        <React.Fragment>\r\n          <span>Select an item from list!</span>\r\n          <Spinner />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n\r\n    const { name } = item;\r\n\r\n    return (\r\n      <ErrorBoundry>\r\n        <div className=\"item-details card\">\r\n          <img className=\"item-image\" src={image}></img>\r\n          <div className=\"card-body\">\r\n            <h3>{name}</h3>\r\n            <ul className=\"list-group list-group-flush\">\r\n              {Children.map(this.props.children, child =>\r\n                React.cloneElement(child, { item })\r\n              )}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n\r\nItemDetails.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  getData: PropTypes.func.isRequired,\r\n  getImageUrl: PropTypes.func.isRequired,\r\n  children: PropTypes.array.isRequired,\r\n};\r\n","import RecordItem from './RecordItem';\r\n\r\nexport default RecordItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst RecordItem = ({ item, field, label }) => (\r\n  <li className=\"list-group-item\">\r\n    <span className=\"term\">{label}</span>\r\n    <span>{item[field]}</span>\r\n  </li>\r\n);\r\n\r\nRecordItem.propTypes = {\r\n  item: PropTypes.object,\r\n  field: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default RecordItem;\r\n","import React from 'react';\r\nimport ItemDetails from '../ItemDetails';\r\nimport RecordItem from '../RecordItem';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\n\r\nconst PersonDetails = props => (\r\n  <ItemDetails {...props}>\r\n    <RecordItem field=\"gender\" label=\"Gender\" />\r\n    <RecordItem field=\"birthYear\" label=\"Birth Year\" />\r\n    <RecordItem field=\"eyeColor\" label=\"Eye color\" />\r\n    <RecordItem field=\"hairColor\" label=\"Hair Color\" />\r\n    <RecordItem field=\"skinColor\" label=\"Skin Color\" />\r\n    <RecordItem field=\"height\" label=\"Height\" />\r\n    <RecordItem field=\"mass\" label=\"Mass\" />\r\n  </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = swapiService => ({\r\n  getData: swapiService.getPerson,\r\n  getImageUrl: swapiService.getPersonImageUrl,\r\n});\r\n\r\nexport default SwapiServiceWrapper(mapMethodsToProps)(PersonDetails);\r\n","import React from 'react';\r\nimport ItemDetails from '../ItemDetails';\r\nimport RecordItem from '../RecordItem';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\n\r\nconst StarshipDetails = props => (\r\n  <ItemDetails {...props}>\r\n    <RecordItem field=\"model\" label=\"Model\" />\r\n    <RecordItem field=\"starshipClass\" label=\"Starship class\" />\r\n    <RecordItem field=\"manufacturer\" label=\"Manufacturer\" />\r\n    <RecordItem field=\"costInCredits\" label=\"Cost in credits\" />\r\n    <RecordItem field=\"length\" label=\"Length\" />\r\n    <RecordItem field=\"crew\" label=\"Crew\" />\r\n    <RecordItem field=\"passengers\" label=\"Passengers\" />\r\n  </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = swapiService => ({\r\n  getData: swapiService.getStarship,\r\n  getImageUrl: swapiService.getStarshipImageUrl,\r\n});\r\n\r\nexport default SwapiServiceWrapper(mapMethodsToProps)(StarshipDetails);\r\n","import React from 'react';\r\nimport ItemDetails from '../ItemDetails';\r\nimport RecordItem from '../RecordItem';\r\nimport { SwapiServiceWrapper } from '../HocHelpers';\r\n\r\nconst PlanetDetails = props => (\r\n  <ItemDetails {...props}>\r\n    <RecordItem field=\"population\" label=\"Population\" />\r\n    <RecordItem field=\"rotationPeriod\" label=\"Rotation period\" />\r\n    <RecordItem field=\"diameter\" label=\"Diameter\" />\r\n    <RecordItem field=\"terrain\" label=\"Terrain\" />\r\n  </ItemDetails>\r\n);\r\n\r\nconst mapMethodsToProps = swapiService => ({\r\n  getData: swapiService.getPlanet,\r\n  getImageUrl: swapiService.getPlanetImageUrl,\r\n});\r\n\r\nexport default SwapiServiceWrapper(mapMethodsToProps)(PlanetDetails);\r\n","import React, { Component } from 'react';\r\nimport RowEntity from '../RowEntity';\r\nimport { PeopleList, PersonDetails } from '../CommonComponents';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\n\r\n// этот компонент нужен для реализации паттерна Error Boundary, чтобы функция componentDidCatch() в App,\r\n// не останавливала ВСЕ приложение в случае ошибки в одном из компонентов приложения\r\n// т.о. мы при возникновении ошибки в компоненте PeoplePage, другие компоненты будут работать,\r\n// потому что React пойдет по дереву DOM вверх, найдет ближайший componentDidCatch(), не дойдя до App\r\n// и выкинет предупреждени об именно в этом компоненте\r\nexport default class PeoplePage extends Component {\r\n  state = {\r\n    selectedItem: '5',\r\n  };\r\n\r\n  onItemSelected = selectedItem => {\r\n    this.setState({ selectedItem });\r\n  };\r\n\r\n  render() {\r\n    const { selectedItem } = this.state;\r\n\r\n    const itemList = (\r\n      <PeopleList onItemSelected={this.onItemSelected}>\r\n        {item => `${item.name} (${item.gender})`}\r\n      </PeopleList>\r\n    );\r\n\r\n    const itemDetails = <PersonDetails id={selectedItem} />;\r\n\r\n    // паттерн свойства-компоненты\r\n    return (\r\n      <ErrorBoundry>\r\n        <RowEntity left={itemList} right={itemDetails} />\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport RowEntity from '../RowEntity';\r\nimport { PlanetsList, PlanetDetails } from '../CommonComponents';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\n\r\n// этот компонент нужен для реализации паттерна Error Boundary, чтобы функция componentDidCatch() в App,\r\n// не останавливала ВСЕ приложение в случае ошибки в одном из компонентов приложения\r\n// т.о. мы при возникновении ошибки в компоненте PeoplePage, другие компоненты будут работать,\r\n// потому что React пойдет по дереву DOM вверх, найдет ближайший componentDidCatch(), не дойдя до App\r\n// и выкинет предупреждени об именно в этом компоненте\r\nexport default class PlanetsPage extends Component {\r\n  state = {\r\n    selectedItem: '5',\r\n  };\r\n\r\n  onItemSelected = selectedItem => {\r\n    this.setState({ selectedItem });\r\n  };\r\n\r\n  render() {\r\n    const { selectedItem } = this.state;\r\n\r\n    const itemList = (\r\n      <PlanetsList onItemSelected={this.onItemSelected}>\r\n        {item => `${item.name} (${item.terrain})`}\r\n      </PlanetsList>\r\n    );\r\n\r\n    const itemDetails = <PlanetDetails id={selectedItem} />;\r\n\r\n    // паттерн свойства-компоненты\r\n    return (\r\n      <ErrorBoundry>\r\n        <RowEntity left={itemList} right={itemDetails} />\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport RowEntity from '../RowEntity';\r\nimport { StarshipsList, StarshipDetails } from '../CommonComponents';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\n\r\n// этот компонент нужен для реализации паттерна Error Boundary, чтобы функция componentDidCatch() в App,\r\n// не останавливала ВСЕ приложение в случае ошибки в одном из компонентов приложения\r\n// т.о. мы при возникновении ошибки в компоненте PeoplePage, другие компоненты будут работать,\r\n// потому что React пойдет по дереву DOM вверх, найдет ближайший componentDidCatch(), не дойдя до App\r\n// и выкинет предупреждени об именно в этом компоненте\r\nexport default class StarshipsPage extends Component {\r\n  state = {\r\n    selectedItem: '5',\r\n  };\r\n\r\n  onItemSelected = selectedItem => {\r\n    this.setState({ selectedItem });\r\n  };\r\n\r\n  render() {\r\n    const { selectedItem } = this.state;\r\n\r\n    const itemList = (\r\n      <StarshipsList onItemSelected={this.onItemSelected}>\r\n        {item => `${item.name} (${item.model})`}\r\n      </StarshipsList>\r\n    );\r\n\r\n    const itemDetails = <StarshipDetails id={selectedItem} />;\r\n\r\n    // паттерн свойства-компоненты\r\n    return (\r\n      <ErrorBoundry>\r\n        <RowEntity left={itemList} right={itemDetails} />\r\n      </ErrorBoundry>\r\n    );\r\n  }\r\n}\r\n","// Код, который работает с сетью лучше изолировать в отдельный класс-сервис\r\n// Компоненты не должны знать откуда именно приходят данные\r\n// Такая инкапсуляция упростит тестирование и поддержку кода, который работает с API\r\n\r\nexport default class SwapiService {\r\n  // _varibale - это code convention JS\r\n  // это приватная часть класса, таким образом мы говорим другим разработчикам,\r\n  // что это переменная, которую не нужно изменять снаружи класса\r\n  _baseUrl = 'https://swapi.dev/api';\r\n  _baseImageUrl = 'https://starwars-visualguide.com/assets/img';\r\n\r\n  // получение данных по API\r\n  getResource = async url => {\r\n    const response = await fetch(`${this._baseUrl}${url}`);\r\n    const body = await response.json();\r\n\r\n    if (response.status !== 200) {\r\n      throw new Error(\r\n        `Could not fetch ${url}. Recieved status code ${response.status}`\r\n      );\r\n    }\r\n\r\n    return body;\r\n  };\r\n\r\n  // получение картинки\r\n  getPersonImageUrl = personId =>\r\n    `${this._baseImageUrl}/characters/${personId}.jpg`;\r\n\r\n  getStarshipImageUrl = starshipId =>\r\n    `${this._baseImageUrl}/starships/${starshipId}.jpg`;\r\n\r\n  getPlanetImageUrl = planetId =>\r\n    `${this._baseImageUrl}/planets/${planetId}.jpg`;\r\n\r\n  // получение всех персонажей\r\n  getAllPeople = async () => {\r\n    const response = await this.getResource('/people/');\r\n    return response.results.map(this._transformPerson);\r\n  };\r\n\r\n  // получение конкретного персонажа\r\n  getPerson = async personId => {\r\n    const person = await this.getResource(`/people/${personId}`);\r\n    return this._transformPerson(person);\r\n  };\r\n\r\n  // получение всех планет\r\n  getAllPlanets = async () => {\r\n    const response = await this.getResource('/planets/');\r\n    return response.results.map(this._transformPlanet);\r\n  };\r\n\r\n  // получение конкретной планеты\r\n  getPlanet = async planetId => {\r\n    const planet = await this.getResource(`/planets/${planetId}`);\r\n    return this._transformPlanet(planet);\r\n  };\r\n\r\n  // получение всех космических кораблей\r\n  getAllStarships = async () => {\r\n    const response = await this.getResource('/starships/');\r\n    return response.results.map(this._transformStarship);\r\n  };\r\n\r\n  // получение конкретного корабля\r\n  getStarship = async starshipId => {\r\n    const starship = await this.getResource(`/starships/${starshipId}`);\r\n    return this._transformStarship(starship);\r\n  };\r\n\r\n  _getExtractId = item => {\r\n    const idRegExp = /\\/([0-9]*)\\/$/;\r\n    return item.url.match(idRegExp)[1];\r\n  };\r\n\r\n  _transformPlanet = planet => ({\r\n    id: this._getExtractId(planet),\r\n    name: planet.name,\r\n    population: planet.population,\r\n    rotationPeriod: planet.rotation_period,\r\n    diameter: planet.diameter,\r\n    terrain: planet.terrain,\r\n  });\r\n\r\n  _transformStarship = starship => ({\r\n    id: this._getExtractId(starship),\r\n    name: starship.name,\r\n    model: starship.model,\r\n    starshipClass: starship.starship_class,\r\n    manufacturer: starship.manufacturer,\r\n    costInCredits: starship.cost_in_credits,\r\n    length: starship.length,\r\n    crew: starship.crew,\r\n    passengers: starship.passengers,\r\n  });\r\n\r\n  _transformPerson = person => ({\r\n    id: this._getExtractId(person),\r\n    name: person.name,\r\n    gender: person.gender,\r\n    birthYear: person.birth_year,\r\n    eyeColor: person.eye_color,\r\n    hairColor: person.hair_color,\r\n    skinColor: person.skin_color,\r\n    height: person.height,\r\n    mass: person.mass,\r\n  });\r\n}\r\n","import App from './App';\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Header from '../Header';\r\nimport RandomPlanet from '../RandomPlanet';\r\nimport { PeoplePage, PlanetsPage, StarshipsPage } from '../Pages';\r\nimport ErrorBoundry from '../ErrorBoundry';\r\nimport SwapiService from '../../services/swapi-service';\r\nimport { SwapiServiceProvider } from '../SwapiServiceContext';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const swapiService = new SwapiService();\r\n  return (\r\n    <ErrorBoundry>\r\n      <SwapiServiceProvider value={swapiService}>\r\n        <Router>\r\n          <div className=\"stardb-app\">\r\n            <Header />\r\n            <RandomPlanet />\r\n            <Route\r\n              path=\"/\"\r\n              exact={true}\r\n              render={() => <h2>Welcome to StarDB</h2>}\r\n            />\r\n            <Route path=\"/people\" component={PeoplePage} />\r\n            <Route path=\"/planets\" component={PlanetsPage} />\r\n            <Route path=\"/starships\" component={StarshipsPage} />\r\n          </div>\r\n        </Router>\r\n      </SwapiServiceProvider>\r\n    </ErrorBoundry>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.querySelector('.root')\r\n);\r\n"],"sourceRoot":""}